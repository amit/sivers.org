<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<title>Beekeep | Derek Sivers</title>
<meta name="description" content="Derek Sivers home, blog, projects" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<link rel="alternate" type="application/atom+xml" title="Derek Sivers" href="/en.atom" />
<link rel="stylesheet" href="/css/2015-04.css" type="text/css" media="screen" />
</head>
<body id="beekeep">

<section id="masthead">
  <h1><a href="/" title="Derek Sivers">Derek Sivers</a></h1>
  <small>Entrepreneur, programmer, avid student of life. I make useful things, and share what I learn.</small>
</section>

<section id="content">


<h1><a href="/projects">Projects</a> » Beekeep</h1>

<p>
<a href="http://en.wikipedia.org/wiki/Double-entry_bookkeeping_system">Double-entry bookkeeping</a>, similar to <a href="http://www.gnucash.org/">Gnucash</a>, but built right into a company's database.
</p><p>
No list of customers, sending of invoices, or duplication of anything a company's website already has.  Just bookkeeping: a detailed record of financial transactions, which generate <a href="http://www.sec.gov/investor/pubs/begfinstmtguide.htm">financial statements</a>, and corporate records.
</p><p>
Reason/Usage: Web-based companies keep all company knowledge in server-side database, <em>except</em> accounting things like bank and credit card transactions, which are kept in programs like Quickbooks. Beekeep brings that info into the server-side database as well.
</p><p>
Beekeep's tables will be in the same database with a company's usual server-side database, though Beekeep will only deal with the bookkeeping ones, named below.  It'll have no knowledge of the others, but of course the main app can use Beekeep's tables directly if needed.
</p>

<h3>Status: UNSTARTED.</h3>


<h2>Schema</h2>
<p>
Assuming one installation of this Rails app per-company, so everything below is assumed to belong to that company.
</p><p>
Each company has multiple <strong>beekeeper</strong> (admin) users with either read-write or read-only permission.
</p><p>
A company has at least one <strong>fact</strong>: a simple key-value pair holding anything from tax id to incorporation date to registered address.
</p><p>
The core is the named <strong>account</strong>: each of type bank, cash, asset, liability, equity, expense, or income.
</p><p>
Every transaction is a <strong>txn</strong> (shorthand for “transaction”), which just has a date, note, and flag for whether it's balanced, because the core info is in the <strong>entry</strong>: two per txn, with a from-account and to-account, currency, debit account, credit account, and notes.  The entries need to balance.  Usually directly, but occasionally, like in currency-exchanging, the numbers won't match up directly, so txn.balanced will be set to yes if it's balanced.
</p><p>
Bank accounts are linked linked by id to a <strong>bank</strong>.
</p><p>
To import <a href="http://www.ofxhome.com/">OFX</a>, <a href="http://wiki.gnucash.org/wiki/OFX_Direct_Connect_Bank_Settings">Direct Connect</a>, or <a href="http://web.intuit.com/personal/quicken/qif/">QIF</a> files, the admin downloads it from their bank and uploads it here, which creates an <strong>import_file</strong>, tied to a bank_id and account_id, and the software should import it into that account.
</p><p>
Part of bookkeeping is corporate minutes, so each company can enter a <strong>meeting</strong>, which is just a dated note, a <strong>reminder</strong>, which is a future-dated note to be emailed to an admin, or a <strong>reference_file</strong>, which might be a document like articles of incorporation, share certificates, or whatever.
</p>

<h2>Site</h2>
<p>
The role model is <a href="http://www.gnucash.org/docs/v2.0/C/gnucash-guide/">GnuCash</a>: a nice free accounting app you should install if possible. We should imitate their <a href="http://www.gnucash.org/docs/v2.0/C/gnucash-guide/chapter_accts.html">accounts</a> and <a href="http://www.gnucash.org/docs/v2.0/C/gnucash-guide/chapter_txns.html">transactions</a> almost exactly.
</p><p>
Quite unusually, a company's books should be world-readable, minus only the data that affects others (like customer names).  Part of the inspiration for doing this, instead of using an existing online accounting package, is to be world-auditable, so clients and customers can see a company's entire transparent accounting.
</p><p>
The site will generate the <a href="http://www.sec.gov/investor/pubs/begfinstmtguide.htm">four main financial statements</a>, formatted for easy printing.
</p>

<h2>REST API</h2>
<table class="table table-striped table-bordered">
<thead><tr>
	<th>URI</th>
	<th>GET</th>
	<th>POST</th>
	<th>PUT</th>
	<th>DELETE</th>
</tr></thead>
<tr>
	<th>/beekeepers</th>
	<td>beekeepers (admins) for these books</td>
	<td>person_id + permission to add admin</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/beekeepers/1</th>
	<td>info about this beekeeper / linked person info</td>
	<td>.</td>
	<td>person_id, permissions to change</td>
	<td>delete beekeeper</td>
</tr>
<tr>
	<th>/facts</th>
	<td>facts for company</td>
	<td>key+value to add new fact</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/facts/2</th>
	<td>fact info</td>
	<td>.</td>
	<td>update fact</td>
	<td>delete fact</td>
</tr>
<tr>
	<th>/accounts</th>
	<td>list of accounts for company</td>
	<td>name+accttype to add new account</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/accounts/2</th>
	<td>account info</td>
	<td>.</td>
	<td>update account</td>
	<td>delete account</td>
</tr>
<tr>
	<th>/accounts/2/entries</th>
	<td>entries from or to this account</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/entries/2</th>
	<td>entry info including linked txn + account info</td>
	<td>.</td>
	<td>update entry</td>
	<td>delete entry</td>
</tr>
<tr>
	<th>/txns</th>
	<td>transactions for company</td>
	<td>matching entries to create new transaction+entries</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/txns/2</th>
	<td>transaction info including entries</td>
	<td>entry info to add to this transaction</td>
	<td>update transaction</td>
	<td>delete transaction</td>
</tr>
<tr>
	<th>/txns/2008-07/2010-07</th>
	<td>transactions during this date range</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/txns/2010-07</th>
	<td>transactions during this month</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/txns/2010</th>
	<td>transactions during this year</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/reminders</th>
	<td>reminders for company</td>
	<td>name, send_on, email_to, message to add new reminder</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/reminders/2</th>
	<td>reminder info</td>
	<td>.</td>
	<td>update reminder</td>
	<td>delete reminder</td>
</tr>
<tr>
	<th>/meetings</th>
	<td>meetings for company</td>
	<td>created_at, notes to add new meeting</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/meetings/2</th>
	<td>meeting info</td>
	<td>.</td>
	<td>update meeting</td>
	<td>delete meeting</td>
</tr>
<tr>
	<th>/import_files</th>
	<td>import_files for company</td>
	<td>bank_id, filename, md5 to add new import_file</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/import_files/2</th>
	<td>import_file info</td>
	<td>.</td>
	<td>update import_file</td>
	<td>delete import_file</td>
</tr>
<tr>
	<th>/reference_files</th>
	<td>reference_files for company</td>
	<td>filename, md5 to add new reference_file</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/reference_files/2</th>
	<td>reference_file info</td>
	<td>.</td>
	<td>update reference_file</td>
	<td>delete reference_file</td>
</tr>
<tr>
	<th>/banks</th>
	<td>list of all banks</td>
	<td>name to add new bank</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/banks/2</th>
	<td>bank info</td>
	<td>.</td>
	<td>update bank</td>
	<td>delete bank</td>
</tr>
<tr>
	<th>/banks/2/accounts</th>
	<td>accounts from this bank</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/banks/2/import_files</th>
	<td>import_files for this bank</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/</th>
	<td colspan="3">snapshot of all info (see above) for company, linked to each, for API discovery</td>
	<td>.</td>
</tr>
</table>

<h2>Requirements</h2>

<table class="table table-striped table-bordered">
<tr><th>do</th><th>details</th></tr>
<tr><td>install dev requirements</td><td class="small">install postgresql, ruby19, pgcrypto, rails3 &amp; do your own tests to make sure they're installed</td></tr>
<tr><td>create postgresql database</td><td class="small">createuser beekeep ; createdb -O beekeep -E UTF8 beekeep &amp; load in schema</td></tr>
<tr><td>create people database</td><td class="small">createuser people ; createdb -O people -E UTF8 people &amp; load in schema &amp; fixtures</td></tr>
<tr><td>test on pgsql command-line</td><td class="small">make sure both are there. load in fixtures.pgsql if you want to test queries.</td></tr>
<tr><td>git clone</td><td class="small">git clone http://github.com/thoughts/beekeep - Rails3 project with only models &amp; schema</td></tr>
<tr><td>acts_as_person</td><td class="small">A plugin for Person class - we could use on any model (in any Rails site) whose table has a person_id field, so the '.person' method would pull up the Person model - which connects to the people database, and does &quot;SELECT * FROM persons WHERE id={person_id}&quot;, returning a Person.  Is a shared plugin the best way to do it?</td></tr>
<tr><td>create plugin</td><td class="small"></td></tr>
<tr><td>test that it works with different projects</td><td class="small"></td></tr>
<tr><td>write README on how to integrate into any project</td><td class="small"></td></tr>
<tr><td>upload to Github</td><td class="small"></td></tr>
<tr><td>acts_as_money</td><td class="small">A plugin for Money class - as described here: http://martinfowler.com/eaaCatalog/money.html<br />
	Database stores millicents (1/100th of a cent) + 3-letter currency code.<br />
	See if this could adapt for our millicents. http://github.com/aflatter/money<br />
	Should be able to make any model acts_as_money to get &quot;currency&quot;, and &quot;millicents&quot; to make money.<br />
	Though fieldname needs to be editable. 'millicents' is default.</td></tr>
<tr><td>Currency class</td><td class="small">for each currency, knows conversion rates, code, full name, sprintf number formatting.<br />
	http://www.oanda.com/convert/fxdaily easy to bring new numbers into Currency class</td></tr>
<tr><td>porting functions from Money.php + Currency.php</td><td class="small">see those two PHP classes to understand. what functions to keep/ditch/refactor?</td></tr>
<tr><td>Currency class</td><td class="small">function __construct($code) creates Currency object with code if valid. throws error if invalid.</td></tr>
<tr><td>function multiply_to_get($new_code)</td><td class="small">used for making new Money object</td></tr>
<tr><td>static function is_valid($code)</td><td class="small">boolean: is this 3-letter code known &amp; valid?</td></tr>
<tr><td>Money class __construct($millicents, $code)</td><td class="small">to create new Money object</td></tr>
<tr><td>function show_no_code()</td><td class="small">to display &quot;$13.52&quot; or &quot;€12&quot; but no &quot;USD&quot; or &quot;EUR&quot;</td></tr>
<tr><td>function show_with_code()</td><td class="small">same but add 3-letter code</td></tr>
<tr><td>function show_with_name()</td><td class="small">same but full name instead of code &quot;U.S. Dollars&quot;, &quot;Brazilian Real&quot;</td></tr>
<tr><td>function code()</td><td class="small">return just 3-letter code</td></tr>
<tr><td>function amount()</td><td class="small">return just float, rounded to 2 decimals: 13.52</td></tr>
<tr><td>function times($float)</td><td class="small">return new Money object, multiplying millicents by this number</td></tr>
<tr><td>function plus(Money $m)</td><td class="small">add two money objects, return in currency of the first</td></tr>
<tr><td>function minus(Money $m)</td><td class="small">subtract 2nd money object from first, keep first's currency</td></tr>
<tr><td>function equals(Money $m)</td><td class="small">boolean: 2 moneys have equal amounts?  (less than 100 millicents)</td></tr>
<tr><td>function converted_to($new_code)</td><td class="small">return new Money converted to new currency</td></tr>
<tr><td>static function from_float($float, $code)</td><td class="small">create new Money from float (13.52, 'EUR')</td></tr>
<tr><td>static function sum($array_of_money)</td><td class="small">input array of money objects, return new money of sum, in currency of first</td></tr>
<tr><td>account.rb</td><td class="small"></td></tr>
<tr><td>account.rb test belongs_to :bank</td><td class="small"></td></tr>
<tr><td>look at entry.rb from_account and to_account</td><td class="small">see how Account model should join these entries (together or separate)</td></tr>
<tr><td>account.rb test has_many :entries for both</td><td class="small">(whatever you came up with)</td></tr>
<tr><td>account.rb validations</td><td class="small">name is not null. name is unique.<br />
	accttype is in list<br />
	bank_id references banks</td></tr>
<tr><td>beekeeper.rb</td><td class="small"></td></tr>
<tr><td>beekeeper.rb test .person</td><td class="small">should pull up related Person from people database</td></tr>
<tr><td>beekeeper.rb validations</td><td class="small">person_id is unique. permissions can only be 'read-write' or 'read-only'</td></tr>
<tr><td>bank.rb</td><td class="small"></td></tr>
<tr><td>bank.rb test has_many :accounts</td><td class="small"></td></tr>
<tr><td>bank.rb test has_many :import_files</td><td class="small"></td></tr>
<tr><td>bank.rb validate: name is unique</td><td class="small"></td></tr>
<tr><td>entry.rb</td><td class="small"></td></tr>
<tr><td>entry.rb join account</td><td class="small">twice: as to_account using account_id and from_account using from_account_id</td></tr>
<tr><td>entry.rb test belongs_to :txn</td><td class="small"></td></tr>
<tr><td>entry.rb test belongs_to both account-joins</td><td class="small"></td></tr>
<tr><td>entry.rb validations:</td><td class="small">not null &amp; references exist for: txn_id, account_id, from_account_id</td></tr>
<tr><td>fact.rb</td><td class="small"></td></tr>
<tr><td>fact.rb validations:</td><td class="small">not null not empty: factkey and factvalue</td></tr>
<tr><td>import_file.rb</td><td class="small"></td></tr>
<tr><td>import_file.rb test belongs_to :bank</td><td class="small"></td></tr>
<tr><td>import_file.rb validations:</td><td class="small">not null &amp; references exist for :bank<br />
	file_exists? and md5 matches database+file</td></tr>
<tr><td>method to download/deliver file itself</td><td class="small"></td></tr>
<tr><td>meeting.rb</td><td class="small"></td></tr>
<tr><td>meeting.rb validations:</td><td class="small">not null not empty: notes</td></tr>
<tr><td>reference_file.rb</td><td class="small"></td></tr>
<tr><td>reference_file.rb validations:</td><td class="small">file_exists? and md5 matches database+file</td></tr>
<tr><td>method to download/deliver file itself</td><td class="small"></td></tr>
<tr><td>reminder.rb</td><td class="small">set up email_to as a belongs_to :beekeeper key</td></tr>
<tr><td>reminder.rb method to mark as complete</td><td class="small">sets today's date in completed_at. this is clicked by user, not cron job.</td></tr>
<tr><td>reminder.rb method to send today's</td><td class="small">if today's date == send_on then send message to email_to.beekeeper.person.email.</td></tr>
<tr><td>reminder.rb cronjob</td><td class="small">shell script to use model's send_todays. able to be run by OS cron</td></tr>
<tr><td>txn.rb</td><td class="small">understand a transaction is a balanced combination of two or more entries (1 debit 1 credit)</td></tr>
<tr><td>txn.rb test has_many :entries</td><td class="small"></td></tr>
<tr><td>txn.rb method is_balanced?</td><td class="small">this wouldn't need to exist but for one situation: currency exchange. $100 USD leaves one account, £66.81 GBP hits another. the bank used their exchange rate which is slightly different than ours, but still this transaction needs to be marked as balanced if a person says so.  So it may be an enhanced-boolean response: TRUE if exact match, FALSE if not even close, or FOREX/MAYBE if a person needs to verify.</td></tr>
<tr><td>Beekeeper REST controller</td><td class="small">normal REST. on GET, bring in name and email from Person.</td></tr>
<tr><td>Fact REST controller</td><td class="small">normal REST</td></tr>
<tr><td>Account REST controller</td><td class="small">normal REST plus next feature...</td></tr>
<tr><td>/entries parameter on Account REST</td><td class="small">/accounts/2/entries should do SELECT * FROM entries WHERE account_id=2 OR from_account_id=2 ORDER BY id DESC</td></tr>
<tr><td>Entries REST controller</td><td class="small">normal REST. I guess /entries could show all entries (newest first) even though that's not very useful, it is the norm.<br />
	include linked txn_id and account id+name</td></tr>
<tr><td>Txns REST controller</td><td class="small">normal REST plus next few search features...</td></tr>
<tr><td>/yyyy parameter on Txns REST</td><td class="small">/txns/2010 should show all Txns in 2010</td></tr>
<tr><td>/yyyy-mm parameter on Txns REST</td><td class="small">/txns/2010-03 should show all Txns in March 2010</td></tr>
<tr><td>/yyyy-mm/yyyy-mm parameter on Txns REST</td><td class="small">/txns/2008-11/2010-03 should show all Txns from 2008-11-01 through 2010-03-31<br />
	see http://www.postgresql.org/docs/8.4/static/functions-datetime.html</td></tr>
<tr><td>Reminders REST controller</td><td class="small">normal REST controller</td></tr>
<tr><td>Meetings REST controller</td><td class="small">normal REST controller</td></tr>
<tr><td>ImportFiles REST controller</td><td class="small">normal REST controller</td></tr>
<tr><td>ReferenceFiles REST controller</td><td class="small">normal REST controller</td></tr>
<tr><td>Banks REST controller</td><td class="small">normal REST controller plus next few features...</td></tr>
<tr><td>/accounts parameter on Banks REST</td><td class="small">/banks/2/accounts should do SELECT * FROM accounts WHERE bank_id=2</td></tr>
<tr><td>/import_files parameter on Banks REST</td><td class="small">/banks/2/import_files should do SELECT * FROM import_files WHERE bank_id=2</td></tr>
<tr><td>home/index controller</td><td class="small">company overview, with linked list of all accounts, facts, most recent txns, reminders, meetings, and reference_files.  No need for banks or import_files.</td></tr>
<tr><td>basic working REST</td><td class="small">no import of bank files yet</td></tr>
<tr><td>bank file import</td><td class="small">big one. we need to talk about this. version 2.0 kind of thing, but crucial.</td></tr>
</table>

<h2>Database Schema</h2>
<pre>
BEGIN;

CREATE SCHEMA beekeep;
SET search_path = beekeep;

CREATE TABLE beekeepers (
	id serial primary key,
	person_id integer not null unique,
	permissions varchar(10) not null CHECK (permissions IN ('read-only', 'read-write'))
);

CREATE TABLE facts (
	id serial primary key,
	factkey varchar(32),
	factvalue text
);
CREATE INDEX fctky ON facts(factkey);

-- accounting:

CREATE TABLE banks (
	id serial primary key,
	name varchar(64) not null unique
);

CREATE TABLE accounts (
	id serial primary key,
	name varchar(64) not null unique,
	accttype varchar(9) not null CHECK (accttype IN ('bank', 'cash', 'asset', 'liability', 'equity', 'expense', 'income')),
	bank_id integer references banks,
	notes text
);

CREATE TABLE txns (
	id serial primary key,
	created_at date not null,
	balanced boolean not null default false,
	notes text
);

CREATE TABLE entries (
	id serial primary key,
	txn_id integer not null references txns,
	account_id integer not null references accounts,
	from_account_id integer references accounts,  -- null if split 
	currency char(3) not null default 'USD',
	debit numeric,
	credit numeric,
	name varchar(255),
	ref varchar(32),  -- check no, paypal transaction id
	notes text
);
CREATE INDEX entxn ON entries(txn_id);
CREATE INDEX entai ON entries(account_id);
CREATE INDEX entfi ON entries(from_account_id);

--- non-accounting:

CREATE TABLE reminders (
	id serial primary key,
	name text,
	send_on date not null,
	email_to integer not null references beekeepers,
	message text,
	completed_at date
);

CREATE TABLE meetings (
	id serial primary key,
	created_at date,
	notes text
);

CREATE TABLE import_files (
	id serial primary key,
	bank_id integer not null references banks,
	created_at date not null,
	completed_at date,
	filename varchar(127),
	md5 char(32)
);

CREATE TABLE reference_files (
	id serial primary key,
	created_at date not null,
	filename varchar(127),
	md5 char(32)
);

COMMIT;
</pre>



<h2>Afterthoughts:</h2>

<h4>2010-03-11</h4>
<div class="entry">QUESTION:  SHOULD THIS BE A WEBSERVICE OR NOT?<br />
<br />
At first I thought this should be a webservice because all of its bookkeeping features would be the same across many different companies.  So why repeat?<br />
<br />
But that logic was flawed.  If this was a Rails project that accessed only a few tables right inside a company's existing database, then each company could also do good things to join up queries with invoices or payments, for example, into accounts, txns, entries, facts, reminders.<br />
<br />
Two Rails projects.  One database.<br />
One Rails app does the stuff that users and admins need to see.<br />
One Rails app does just the corporate accounting/bookkeeping that maybe only the CEO and accountant need to see.<br />
<br />
Rename admins to beekeepers - so as not to clash with other tables.<br />
<br />
It can still be a REST service, though there might be no reason why, unless it's just future iPhone/Android apps or something.<br />
<br />
</div>


</section>
</body>
</html>

