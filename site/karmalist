<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<title>KarmaList | Derek Sivers</title>
<meta name="description" content="Derek Sivers home, blog, projects" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<link rel="alternate" type="application/atom+xml" title="Derek Sivers" href="/en.atom" />
<link rel="stylesheet" href="/css/2015-04.css" type="text/css" media="screen" />
</head>
<body id="karmalist">

<section id="masthead">
  <h1><a href="/" title="Derek Sivers">Derek Sivers</a></h1>
  <small>Entrepreneur, programmer, avid student of life. I make useful things, and share what I learn.</small>
</section>

<section id="content">


<h1><a href="/projects">Projects</a> » KarmaList</h1>

<p>
See <a href="http://sivers.org/kl">KarmaList Wishlist</a> for an intro.
</p><p>
Open database of contacts with ratings. REST interface so it can be integrated into other internal software.
</p><p>
For example, <a href="/muckwork/">Muckwork</a> will be constantly finding companies for people: a photographer in Berlin, a rehearsal studio in Chicago.  Instead of keeping those findings locked in a private database, it would be better to open them up to the world, and let other people suggest companies they've used and like, or give ratings for which companies to avoid.  So Muckwork will actually use it as its sole database of contacts.
</p><p>
Usually databases like this are locked down and sold, or traffic is encouraged to stay on the site for advertising, but Karmalist will be kept wide open with no standalone business motive, and encourage embedding into other software.
</p>

<h3>status: building. not started.</h3>

<h2>Schema</h2>
<p>
A <strong>company</strong> is the basic contact, and has only an ID# and unique name.
</p><p>
A <strong>fact</strong> is a simple key-value pair, with unlimited number attached to a company to hold info like URL, email, address, description, etc.
</p><p>
A <strong>user</strong> is any registered user using the site, including a flag to say whether they are an administrator or not.
</p><p>
A user creates a <strong>rating</strong> for a company.  A simple 0-5 digit.
</p><p>
A user can also create a <strong>comment</strong> for a company.  Anything they want to say about a company.  Kept separate from rating, so people can give a rating without a comment, or a comment without a rating.
</p><p>
Any change to a company or fact is saved as a <strong>change</strong>, like a <a href="http://en.wikipedia.org/wiki/Diff">diff</a>.
</p>

<h2>Site</h2>
<p>
The site is pretty standard and obvious.  Browse companies by any facts or ratings.  Search for any phrase in a company name or fact info.  No registration needed to view.
</p><p>
To leave a rating or comment, or to add or edit info, someone signs up as a user.  (Then the usual “forgot my password” stuff.)
</p>

<h2>REST API</h2>
<table class="table table-striped table-bordered">
<thead><tr>
	<th>URI</th>
	<th>GET</th>
	<th>POST</th>
	<th>PUT</th>
	<th>DELETE</th>
</tr></thead>
<tr>
	<th>/company</th>
	<td>all companies</td> 
	<td>name to create new company</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/company/2</th>
	<td>company info</td>
	<td>.</td>
	<td>update name</td>
	<td>delete company</td>
</tr>
<tr>
	<th>/company/2/facts</th>
	<td>facts for company</td>
	<td>name, fact to add new fact</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/company/2/ratings</th>
	<td>ratings for company</td>
	<td>user_id, rating to add new rating</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/company/2/comments</th>
	<td>comments for company</td>
	<td>user_id, comment to add new comment</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/company/2/changes</th>
	<td>changes to a company</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/company/2/all</th>
	<td>all company info (see above)</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/fact/2</th>
	<td>fact info</td>
	<td>.</td>
	<td>update fact</td>
	<td>delete fact</td>
</tr>
<tr>
	<th>/rating/2</th>
	<td>rating info</td>
	<td>.</td>
	<td>update rating</td>
	<td>delete rating</td>
</tr>
<tr>
	<th>/comment/2</th>
	<td>comment info</td>
	<td>.</td>
	<td>update comment</td>
	<td>delete comment</td>
</tr>
<tr>
	<th>/change/2</th>
	<td>change info</td>
	<td>.</td>
	<td>update change (example: before patching)</td>
	<td>delete change (refuse)</td>
</tr>
<tr>
	<th>/patch</th>
	<td>.</td>
	<td>post change.id to apply+accept it</td>
	<td>.</td>
	<td>.</td>
</tr>
</table>

<h2>Database Schema</h2>
<pre>
BEGIN;
CREATE SCHEMA karmalist;
SET search_path = karmalist;

CREATE TABLE companies (
	id serial primary key,
	name text not null unique
);

CREATE TABLE facts (
	id serial primary key,
	company_id integer not null REFERENCES companies(id),
	name varchar(32) not null,
	fact text
);
CREATE INDEX facts_company ON facts(company_id);

CREATE TABLE users (
	id serial primary key,
	remote_id text,
	username varchar(32) not null UNIQUE,
	hashpass char(32),
	email varchar(255),
	is_admin boolean not null default FALSE,
	created_at date not null default CURRENT_DATE
);

CREATE TABLE ratings (
	id serial primary key,
	user_id integer not null REFERENCES users(id),
	company_id integer not null REFERENCES companies(id),
	rating integer not null CHECK (rating &gt;= 0 AND rating &lt;= 5),
	created_at date not null default CURRENT_DATE
);
CREATE INDEX ratings_company ON ratings(company_id);

CREATE TABLE comments (
	id serial primary key,
	user_id integer not null REFERENCES users(id),
	company_id integer not null REFERENCES companies(id),
	comment text not null,
	created_at date not null default CURRENT_DATE
);
CREATE INDEX comments_company ON comments(company_id);

CREATE TABLE changes (
	id serial primary key,
	user_id integer not null REFERENCES users(id),
	company_id integer not null REFERENCES companies(id),
	fact_id integer REFERENCES facts(id),
	name varchar(32) not null,
	before text not null,
	after text not null,
	created_at date not null default CURRENT_DATE,
	accepted_at date
);
CREATE INDEX changes_accepted ON changes(accepted_at);

COMMIT;
</pre>


</section>
</body>
</html>

