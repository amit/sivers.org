<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<title>Lang.pro | Derek Sivers</title>
<meta name="description" content="Derek Sivers home, blog, projects" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<link rel="alternate" type="application/atom+xml" title="Derek Sivers" href="/en.atom" />
<link rel="stylesheet" href="/css/2015-10.css" type="text/css" media="screen" />
</head>
<body id="langpro">

<section id="masthead">
	<h1><a href="/" title="Derek Sivers"><img src="/images/DerekSivers-50x50.jpg">Derek Sivers</a></h1>
	<small>Programmer, writer, entrepreneur, avid student of life. I make useful things, and share what I learn.</small>
</section>

<div id="content">


<h1><a href="/projects">Projects</a> » lang.pro</h1>

<p>Language translation project management</p>

<dl>
<dt>Need some text translated?</dt>
<dd>Post any text (from a single word to an entire article) using a REST service or the lang.pro website, and our real (human) translators will translate it into the languages of your choice, returning the result by REST webservice or lang.pro website, keeping your formatting intact. Note: this is a paid service, since it's paying professional translators to do the work.</dd>
<dt>Are you a translator?</dt>
<dd>lang.pro makes it easy to do all translations directly on the website, without needing any outside software.  Articles are broken up into sentences, so you can do one at a time, but read the whole article to get context.  You get paid by the word, and a running count lets you know your total.  lang.pro takes no percentage.</dd>
<dt>Project manager?</dt>
<dd>lang.pro alerts translators when a project is waiting, and the first one to claim it gets it, but only if they do the project soon.  If they wait too long, it reverts back to the pool and alerts the other translators.  All projects are easy to oversee, and contact the client and translators.  The system also allows for reviews, suggestions, and corrections.</dd>
</dl>
<p>
Everything accessible by REST API so it can be integrated into any other software, CLI, or cron.
</p>

<h3>
Status: was live and working, but these days I think <a href="http://gengo.com/">Gengo</a> is doing a great job, so I'm sending all translations to them for now.
</h3>

<h2>Schema</h2>
<p>
A <strong>client</strong> creates a <strong>project</strong> that says, in advance, which languages everything should be translated into.  The client then posts an <strong>original</strong> under that project, for it to be translated into each of that project's languages.  An original is usually English, anything from a single word to an entire article in plain text or HTML. Each original needs an ID (<em>remote_id</em>) given by the client for reference.  It has an optional <em>comment</em>, where the client should give helpful info to the translator.
</p><p>
If the posted original is longer than a sentence, it's split up, and each individual <strong>sentence</strong> is inserted into the database, so that the translators can work with one sentence at a time. The original is updated with a <em>sentencemap</em> that says how to put them back together, so that the client only sees the finished translation. (Especially good for HTML so that translator doesn't need to see codes.)
</p><p>
When a new original is posted by the client, an empty <strong>translation</strong> for each language is created for it in the database, waiting for a <strong>translator</strong> to claim it and start translating.  If the original was broken into sentences, the translation refers to the sentence.  Otherwise it refers only to the original.
</p><p>
Translator attributes are: language, rate-per-word, and priority.  The language is from-and-to English.  Wordrate is their price per-word to translate original text.  Optionally they have a reviewing wordrate, which is their rate to verify (or fix) someone else's translation.  The priority is a 1-10 number set by the manager to set the order in which the translators are notified when translations are waiting.  Lower numbers are notified first, then higher numbers only if lower numbered translators have not claimed the translations after a time.
</p><p>
If a translator claims a translation, but doesn't start or finish it after a reasonable time, it will be unclaimed and available to the pool of translators again.
</p><p>
When a translator marks a translation as finished, a <strong>charge</strong> for it is created, by multiplying the number of words in the original by that translator's price-per-word.
</p><p>
When the translator is paid (by the manager, using PayPal or any other method) a <strong>payment</strong> is created, saving that payment's details, and linking it to specific charges.
</p><p>
Afterwards, if another translator has a correction for a translation, they enter their suggestion as a new translation, with an optional explanation comment.  A “usethis” boolean flag on every translation says which one to use.  This also creates a charge.
</p>

<h2>Sentence Splitting and Mapping</h2>
<p>
When a single word, phrase, or sentence is posted to lang.pro, it makes it easy.  The translator just translates the original directly.
</p><p>
But often, the client will post an HTML page, which needs to be broken down into individual sentences, removing any block-level HTML tags - (since they are between sentences, the translator never needs to see them) - but keeping any inline tags like &lt;strong&gt; or &lt;a href=&quot;&quot;&gt;, since the translator needs to control which words those wrap.
</p><p>
Then, to put the sentences back together, the original needs to keep a <em>sentencemap</em>.
</p>

<h3>EXAMPLE: Client posts this:</h3>
<code>
&lt;!-- Split me up, baby! --&gt;<br />
&lt;p&gt;<br />
Mr. Thompson is from the U.S.A. and is 75 years old. Dr. Bob is a &lt;strong&gt;great&lt;/strong&gt; dentist. Can this deal with a &lt;a href=&quot;http://wikipedia.org&quot;&gt;question&lt;/a&gt;?  It sure can! &quot;But why,&quot; you ask? “But why,” I correct you with curly-quotes.<br />
&lt;/p&gt;&lt;ul&gt;<br />
&lt;li&gt;some things&lt;/li&gt;<br />
&lt;li&gt;are better in lists&lt;/li&gt;<br />
&lt;/ul&gt;
</code>
<h3>It's split into this:</h3>
<ol>
<li>Split me up, baby!</li>
<li>Mr. Thompson is from the U.S.A. and is 75 years old.</li>
<li>Dr. Bob is a &lt;strong&gt;great&lt;/strong&gt; dentist.</li>
<li>Can this deal with a &lt;a href=&quot;http://wikipedia.org&quot;&gt;question&lt;/a&gt;?</li>
<li>It sure can!</li>
<li>&quot;But why,&quot; you ask?</li>
<li>“But why,” I correct you with curly-quotes.</li>
<li>some things</li>
<li>are better in lists</li>
</ol>
<h3>The saved map would be a text string like this:</h3>
<code>
&lt;!-- {1} --&gt;<br />
&lt;p&gt;<br />
{2}{3}{4}{5}{6}{7}<br />
&lt;/p&gt;&lt;ul&gt;<br />
&lt;li&gt;{8}&lt;/li&gt;<br />
&lt;li&gt;{9}&lt;/li&gt;<br />
&lt;/ul&gt;
</code>
<h3>The translator would translate each sentence separately:</h3>
<ol>
<li>Diviser-moi, bébé!</li>
<li>M. Thompson est de l'Amérique et a 75 ans.</li>
<li>Dr Bob est un dentiste &lt;strong&gt;merveilleux&lt;/strong&gt;.</li>
<li>Cela peut-il traiter d'une &lt;a href=&quot;http://wikipedia.org&quot;&gt;question&lt;/a&gt;?</li>
<li>C'est sûr!</li>
<li>«Mais pourquoi?» direz-vous.</li>
<li>«Mais pourquoi?» je vous corriger avec des guillemets.</li>
<li>certaines choses</li>
<li>sont mieux dans les listes</li>
</ol>
<h3>The client gets it mapped like this</h3>
<code>
&lt;h3&gt;Diviser-moi, bébé!&lt;/h3&gt;<br />
&lt;p&gt;<br />
M. Thompson est de l'Amérique et a 75 ans. Dr Bob est un dentiste &lt;strong&gt;merveilleux&lt;/strong&gt;. Cela peut-il traiter d'une &lt;a href=&quot;http://wikipedia.org&quot;&gt;question&lt;/a&gt;? C'est sûr! «Mais pourquoi?» direz-vous. «Mais pourquoi?» je vous corriger avec des guillemets.<br />
&lt;/p&gt;&lt;ul&gt;<br />
&lt;li&gt;certaines choses&lt;/li&gt;<br />
&lt;li&gt;sont mieux dans les listes&lt;/li&gt;<br />
&lt;/ul&gt;
</code>
<h3>NOTES:</h3>
<ul>
<li>Perl CPAN has <a href="http://search.cpan.org/~achimru/Lingua-Sentence-1.00/">Lingua-Sentence</a>, which is a pretty good start for splitting paragraphs into sentences. It didn't catch #7 above, though.</li>
<li>Let's contribute the solution back to open-source as well, whether it's improving that Perl CPAN thing or making our own thing, it should stand alone so others can use just that.</li>
<li>The manager will need to quickly review the automated sentence-splitting and have a tool to add/delete/edit the sentences before assigning to the translators. This step should either update the map or come before the map is made.</li>
<li>Originally I thought every sentence-key (the bits that are used in the map, so the string-replace knows how to put them back) would be codes like “blogarticle-04” “blogarticle-05”, but it might just work using PostgreSQL's auto-assigned id primary key for each sentence.  Or you might decide that's a really bad idea and want to add in codes.  Either way is fine by me.</li>
<li>Notice that the sentence-map has no spaces. Chinese and Japanese do not use spaces inbetween sentences. So the mapping of sentences back into text will need to be aware which language it is remapping, and add spaces when needed.</li>
<li>&lt;!-- Comment tags like this --&gt; are an exception. Usually anything inside &lt; &gt; is ignored, but comments are treated as block-level so as to save the words inside them.</li>
</ul>

<h2>Site</h2>
<p>
The lang.pro website has all of the functionality described above, plus the REST URLs.  Everything is world-readable, but only authorized people can update/create/delete.
</p><p>
Each of the four roles of browser-users have a subdirectory: /c/ for client, /m/ for manager, /t/ for translator.  When a person successfully logs in, they are sent to the appropriate subdirectory. This allows for uniformity of URLs, but with the appropriate views and permissions.  (Example: /m/original/123 would be a manager's view of original ID# 123, with the ability to update it, and see all of its translations.  /t/original/123 would be a translator's view of original ID# 123, only if they are the translator for one of its translations.  They can not edit the original, only the translation.)
</p><p>
The top-level URLs are for the REST API.  Optionally: all the forms in the subdirectories can do all their POST/PUT/DELETE to the REST URLs in the top-level, so all of that functionality is not duplicated.  <strong>Tight permissions</strong> on all, to ensure that translators can only change their translation, clients can only see/create their own originals/translations, and managers can change anything, but not (for example) delete a translator who has translations or charges.
</p><p>
The /m/ manager section lets the manager see, edit, or add anything. Overviews show managerial things like unassigned translations, unpaid translators, open reviews, and such.
</p><p>
One world-public URL is /fix with the format /fix/2/MTCATEGORY6/es where 1=project.id MTCATEGORY6=original.remote_id es=language.  This can by used by the client's website to say, “Suggest an improvement to this translation?” - so anyone can create a review.
</p>

<h2>Some URLs</h2>
<dl>
<dt>/</dt>
  <dd>Home page to describe service, log in, sign up</dd>
<dt>/* = REST</dt>
  <dd>Authenticated REST for all models described above. Plus...</dd>
<dt>/assignment</dt>
  <dd>POST-only: assigns unassigned translations to posted translator.id</dd>
<dt>/rejection</dt>
  <dd>POST-only: rejects a translation, resetting its assignment and deleting any charges for it</dd>
<dt>/m/ = MANAGER</dt>
  <dd>Forms to let the manager see, edit, or add anything. Plus...</dd>
<dt>/m/search</dt>
  <dd>Search originals and translations for phrase, returning linked list</dd>
<dt>/m/undone</dt>
  <dd>List of all unfinished translations</dd>
<dt>/m/undone/2</dt>
  <dd>List of unfinished translations for translator ID# 2</dd>
<dt>/m/unpaid</dt>
  <dd>List of translators owed money, and how much</dd>
<dt>/m/unpaid/2</dt>
  <dd>List of unpaid translations for translator ID# 2, with sum total, and a form to create a new payment, including corresponding charge.ids.</dd>
<dt>/m/payment</dt>
  <dd>When POSTING a new payment, update corresponding charges with its payment.id, verifying the amounts match.</dd>
<dt>/t/ = TRANSLATOR</dt>
  <dd>Pages for a translator to see their translations, unfinished and finished. Forms to edit them. Plus...</dd>
<dt>/t/account</dt>
  <dd>Edit their own info, including info in people database. Note: can't change wordrate. Only manager can.</dd>
</dl>

<h2>REST API</h2>
<table class="table table-striped table-bordered">
<thead><tr>
	<th>URI</th>
	<th>GET</th>
	<th>POST</th>
	<th>PUT</th>
	<th>DELETE</th>
</tr></thead>
<tr>
	<th>/person/2</th>
	<td>get person info</td> 
	<td>.</td>
	<td>update person</td>
	<td>.</td>
</tr>   
<tr>
	<th>/client</th>
	<td>list of all clients</td>
	<td>person_id to add new client</td>
	<td>.</td>
	<td>.</td>
</tr>   
<tr>
	<th>/client/2</th>
	<td>client info (+ list of projects)</td>
	<td>project.name to add new project</td>
	<td>person_id to update person_id</td>
	<td>delete client</td>
</tr>   
<tr>
	<th>/project</th>
	<td>list of all projects</td>
	<td>client_id + name to add new project</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/project/2</th>
	<td>project info</td>
	<td>.</td>
	<td>update project</td>
	<td>delete project</td>
</tr>
<tr>
	<th>/project/2/status</th>
	<td>simple reponse: pending or ready, depending on whether translations are still unfinished</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/project/2/originals</th>
	<td>originals for this project</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/project/2/translations</th>
	<td>finished translations for this project</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/project/2/translations/all</th>
	<td>all translations for this project, finished or not</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/manager</th>
	<td>list of all managers</td>
	<td>person_id to add new manager</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/manager/2</th>
	<td>person info about manager</td>
	<td>.</td>
	<td>update person_id</td>
	<td>delete</td>
</tr>
<tr>
	<th>/translator</th>
	<td>list of all translators</td>
	<td>person_id, lang to add new translator</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/translator/pt</th>
	<td>list of all Portuguese ('pt') translators, order by priority</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/translator/2</th>
	<td>translator info</td>
	<td>.</td>
	<td>update translator</td>
	<td>delete translator</td>
</tr>
<tr>
	<th>/translator/2/translations</th>
	<td>finished translations by this translator</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/translator/2/originals</th>
	<td>originals with unfinished translations waiting for this translator</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/translator/2/payments</th>
	<td>payments to this translator</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/translator/2/charges</th>
	<td>charges for this translator's translations</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/translator/2/all</th>
	<td>all info for this translator (see above)</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/original</th>
	<td>list of all originals available to authorized client (client.projects + shared)</td>
	<td>project_id, remote_id, lang, original, context_url, comment to create new original AND create empty unassigned translations for each of that project's language codes</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/original/2</th>
	<td>get original</td>
	<td>.</td>
	<td>update original</td>
	<td>delete original</td>
</tr>
<tr>
	<th>/remote/x1</th>
	<td colspan="4">alias for /original/id, (same methods), so clients can use their remote_id</td>
</tr>
<tr>
	<th>/original/2/translations</th>
	<td>translations of this original</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/remote/x1/translations</th>
	<td colspan="4">alias for /original/id/translations,so clients can use their remote_id</td>
</tr>
<tr>
	<th>/translation/2</th>
	<td>translation info</td>
	<td>.</td>
	<td>update translation</td>
	<td>delete translation</td>
</tr>
<tr>
	<th>/translation/2/charges</th>
	<td>charges for translation</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/translation/2/reviews</th>
	<td>reviews for translation</td>
	<td>.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/charge</th>
	<td>.</td>
	<td>translation_id to create new charge for that translation (server calculates amount based on translator.wordrate x words)</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/charge/2</th>
	<td>charge info</td>
	<td>.</td>
	<td>update charge</td>
	<td>delete charge</td>
</tr>
<tr>
	<th>/payment</th>
	<td>.</td>
	<td>translator_id, currency, millicents, details to create new payment and mark all their unpaid charges with that payment_id, until millicents sum match. error if not exact match.</td>
	<td>.</td>
	<td>.</td>
</tr>
<tr>
	<th>/payment/2</th>
	<td>payment info</td>
	<td>.</td>
	<td>update payment</td>
	<td>delete payment</td>
</tr>
</table>

<h2>Database Schema</h2>
<pre>
BEGIN;

CREATE SCHEMA lang;
SET search_path = lang;

CREATE TABLE managers (
	id serial primary key,
	person_id integer not null unique
);

CREATE TABLE clients (
	id serial primary key,
	person_id integer not null unique
);

CREATE TABLE translators (
	id serial primary key,
	person_id integer not null unique,
	lang char(2) not null,
	priority integer not null default 10,
	currency char(3) not null default 'USD',
	millicents_per_word_translate integer,
	millicents_per_word_review integer
);

CREATE TABLE projects (
	id serial primary key,
	client_id integer not null REFERENCES clients(id),
	name varchar(64) not null unique,
	langcodes text
);
CREATE INDEX prjcl ON projects(client_id);

CREATE TABLE originals (
	id serial primary key,
	project_id integer REFERENCES projects(id),
	remote_id varchar(127),
	created_at timestamp with time zone not null default CURRENT_TIMESTAMP,
	lang char(2) not null,
	original text,
	comment text,
	sentencemap text,
	UNIQUE (project_id, remote_id)
);
CREATE INDEX orgpi ON originals(project_id);
CREATE INDEX orgri ON originals(remote_id);

CREATE TABLE sentences (
	id serial primary key,
	original_id integer not null REFERENCES originals(id),
	sentence text
);
CREATE INDEX soi ON sentences(original_id);

CREATE TABLE translations (
	id serial primary key,
	original_id integer not null REFERENCES originals(id),
	sentence_id integer REFERENCES sentences(id),
	lang char(2) not null,
	translator_id integer REFERENCES translators(id),
	claimed_at timestamp with time zone,
	started_at timestamp with time zone,
	finished_at timestamp with time zone,
	translation text,
	comment text,
	usethis boolean not null default true
);
CREATE INDEX t9npi ON translations(original_id);
CREATE INDEX t9nsi ON translations(sentence_id);
CREATE INDEX t9nti ON translations(translator_id);

CREATE TABLE payments (
	id serial primary key,
	translator_id integer not null REFERENCES translators(id),
	currency char(3) not null,
	millicents integer,
	created_at date not null default CURRENT_DATE,
	details text
);
CREATE INDEX pyti ON payments(translator_id);

CREATE TABLE charges (
	id serial primary key,
	translation_id integer UNIQUE not null REFERENCES translations(id),
	currency char(3) not null,
	millicents integer,
	payment_id integer REFERENCES payments(id)  -- NULL until paid
);
CREATE INDEX chpi ON charges(payment_id);
CREATE INDEX chti ON charges(translation_id);

COMMIT;
</pre>


</div>
</body>
</html>

