<!-- Muckwork -->

<h1><a href="/projects">Projects</a> → Muckwork</h1>

<p>
Management of remote assistants doing projects for clients.  See the story in the Schema, below, to understand the process.
</p>

<h3>status: building</h3>

<h2>Schema</h2>
<p>
A <strong>client</strong> submits a <strong>project</strong> - something they need done.  They have already made a <strong>payment</strong> so their account has a positive balance.
</p><p>
A <strong>manager</strong> breaks it into a TO-DO list: each step called a <strong>task</strong>.  If it's a common project, the manager will pull up a <strong>template</strong> and copy each <strong>template_task</strong> into that project's tasks.
</p><p>
The manager shows the tasks and estimated cost to the client for approval.  The client's balance needs to be enough to cover the project before we begin.
</p><p>
A <strong>worker</strong>, a person paid by the second for their time, is alerted when there are unassigned tasks to do.  They claim them if they have time, which assigns the task.worker_id to theirs, and have to start or finish soon or else the tasks are unassigned and put back into the pool so that other workers can be alerted.
</p><p>
As the worker marks a task as finished, the total number of seconds spent on that task are multiplied by the worker's fee per-second, to create a <strong>charge</strong>, which is subtracted from the client's balance, and a <strong>worker_charge</strong>.  These are separate because sometimes the client will be charged a flate rate for a task, and not billed by the second, but the worker still needs to get paid for their time.
</p><p>
When Muckwork pays the worker, we log a <strong>worker_payment</strong>, and the corresponding worker_charges are updated with its worker_payment.id, to mark those worker_charges as paid.
</p><p>
All activity through PayPal is saved as a <strong>paypaltxn</strong> (<em>“txn” = transaction</em>) - usually corresponding to a payment_id.
</p>

<h2>Site</h2>
<p>
The muckwork.com website has all of the functionality described above, plus the REST URLs.  All URLs except home/login/signup require authentication.
</p><p>
The REST interface needs to have the full functionality of the site, because many clients will choose to assign and monitor projects from alternate interfaces like mobile apps.  So consider all website pages as just views, with all real POST/PUT/DELETE action run through the REST interface.
</p><p>
On muckwork.com, each of the three roles of browser-users have a subdirectory: /c/ for client, /m/ for manager, /w/ for worker.  When a person successfully logs in, they are sent to the appropriate subdirectory. This allows for uniformity of URLs, but with the appropriate views and permissions.
</p><p>
For the client, the site gives a full transparent window into the execution of their project and its tasks.  They can see exact time worked, by who, and the worker's notes for each task.  If emails are sent and received for a project by the worker or manager, both are saved in the database and viewable by the client.  If phone calls are made for a project, the audio recording of the call is saved as an MP3 and attached to that project.  The client can interrupt a project at any time, or add comments/questions for the manager or worker.
</p><p>
For the worker, the site is an efficient TO-DO list, with quick and easy communication with the manager, an easy email interface for sending and receiving emails for the project.
</p><p>
For the manager, a central dashboard shows the status of all projects and tasks, with clear visual feedback when a task is taking longer than it should.  Very easy to send and receive emails to the worker and client regarding a project.  A manager will spend most time turning incoming project requests into specific tasks, and ensuring that current projects are being done well.
</p>

